import algebra.char_p
import data.zmod.basic
import data.equiv.algebra

import vector_space

universes u v

namespace char_p

variable {Œ± : Type u}
variable [ring Œ±]

open nat

--char_p
lemma char_p_eq_mod (n : ‚Ñï) [char_p Œ± n] (k : ‚Ñï) : (k : Œ±) = (k % n : ‚Ñï) :=
calc (k : Œ±) = (k % n + n * (k / n) : ‚Ñï) : by rw [mod_add_div]
         ... = ‚Üë(k % n) + ‚Üën * ‚Üë(k / n)  : by rw [cast_add, cast_mul]
         ... = ‚Üë(k % n) + 0              : by rw [char_p.cast_eq_zero Œ± n, zero_mul]
         ... = ‚Üë(k % n)                  : by rw [add_zero]

end char_p

namespace zmod

variable {n : ‚Ñï+}
variable (Œ± : Type u)
variables [ring Œ±]

open char_p nat

--zmod n or char_p
def cast : zmod n ‚Üí Œ± := nat.cast ‚àò fin.val

--zmod n or char_p
instance cast_is_ring_hom [char_p Œ± n] : is_ring_hom (cast Œ±) :=
{ map_one := by rw ‚Üêcast_one; exact eq.symm (char_p_eq_mod n 1),
  map_mul := assume x y : zmod n, show ‚Üë((x * y).val) = ‚Üë(x.val) * ‚Üë(y.val), from
    by rw [zmod.mul_val, ‚Üêchar_p_eq_mod, cast_mul],
  map_add := assume x y : zmod n, show ‚Üë((x + y).val) = ‚Üë(x.val) + ‚Üë(y.val), from
    by rw [zmod.add_val, ‚Üêchar_p_eq_mod, cast_add] }

open is_ring_hom

--zmod n or char_p
instance to_module [char_p Œ± n] : module (zmod n) Œ± :=
module.of_core
{ smul := Œª r x, (cast Œ±) r * x,
  smul_add := Œª r x y, by unfold has_scalar.smul; rw[mul_add]; refl,
  add_smul := Œª r s x, by unfold has_scalar.smul;
    rw[map_add (cast Œ±), add_mul]; apply_instance,
  mul_smul := Œª r s x, by unfold has_scalar.smul;
    rw[map_mul (cast Œ±), mul_assoc]; apply_instance,
  one_smul := Œª x, show (cast Œ±) 1 * x = _,
    by rw[map_one (cast Œ±), one_mul]; apply_instance }

instance to_module' {m : ‚Ñï} {hm : m > 0} [hc : char_p Œ± m] : module (zmod ‚ü®m, hm‚ü©) Œ± :=
@zmod.to_module ‚ü®m, hm‚ü© Œ± _ hc

end zmod

namespace char_p

variables (Œ± : Type u) [ring Œ±]

open function nat 

--char_p
lemma ne_zero [fintype Œ±] [decidable_eq Œ±] (p : ‚Ñï) [char_p Œ± p] : p ‚â† 0 :=
(assume h : p = 0,
have ‚àÄ n : ‚Ñï, (n : Œ±) = 0 ‚Üí n = 0, from
  assume (n : ‚Ñï) (h‚ÇÄ : (n : Œ±) = 0),
  have 0 ‚à£ n, from h ‚ñ∏ (cast_eq_zero_iff Œ± p n).mp h‚ÇÄ, 
  show n = 0, from zero_dvd_iff.mp this,
have char_zero Œ±, from add_group.char_zero_of_inj_zero this,
have ht :  injective nat.cast, from @cast_injective Œ± _ _ this,
have hf : ¬¨injective nat.cast, from @set.not_injective_nat_fintype Œ± _ _ _,
absurd ht hf)

end char_p

section integral_domain

variables (Œ± : Type u) [integral_domain Œ±]

open nat function char_p

--integral_domain
lemma char_p_ne_one (p : ‚Ñï) [hc : char_p Œ± p] : p ‚â† 1 :=
assume hp : p = 1,
have (‚Üë1 : Œ±) = 0, from (cast_eq_zero_iff Œ± p 1).mpr (hp ‚ñ∏ (dvd_refl p)),
have ( 1 : Œ±) = 0, from @cast_one Œ± _ _ ‚ñ∏ this,
absurd this one_ne_zero

--integral_domain
lemma char_p_prime_of_ge_two (p : ‚Ñï) [hc : char_p Œ± p] (hp : p ‚â• 2) : nat.prime p :=
suffices ‚àÄd ‚à£ p, d = 1 ‚à® d = p, from ‚ü®hp, this‚ü©,
assume (d : ‚Ñï) (hdvd : ‚àÉ e, p = d * e),
let ‚ü®e, hmul‚ü© := hdvd in
have (p : Œ±) = 0, from (cast_eq_zero_iff Œ± p p).mpr (dvd_refl p),
have (d : Œ±) * e = 0, from (@cast_mul Œ± _ d e) ‚ñ∏ (hmul ‚ñ∏ this),
or.elim (no_zero_divisors.eq_zero_or_eq_zero_of_mul_eq_zero (d : Œ±) e this)
  (assume hd : (d : Œ±) = 0,
  have p ‚à£ d, from (cast_eq_zero_iff Œ± p d).mp hd,
  show d = 1 ‚à® d = p, from or.inr (dvd_antisymm ‚ü®e, hmul‚ü© this))
  (assume he : (e : Œ±) = 0,
  have p ‚à£ e, from (cast_eq_zero_iff Œ± p e).mp he,
  have e ‚à£ p, from dvd_of_mul_left_eq d (eq.symm hmul),
  have e = p, from dvd_antisymm ‚Äπe ‚à£ p‚Ä∫ ‚Äπp ‚à£ e‚Ä∫,
  have h‚ÇÄ : p > 0, from gt_of_ge_of_gt hp (nat.zero_lt_succ 1),
  have d * p = 1 * p, by rw ‚Äπe = p‚Ä∫ at hmul; rw [one_mul]; exact eq.symm hmul,
  show d = 1 ‚à® d = p, from or.inl (eq_of_mul_eq_mul_right h‚ÇÄ this))

--integral_domain
lemma char_p_prime_or_zero (p : ‚Ñï) [hc : char_p Œ± p] : nat.prime p ‚à® p = 0 :=
match p, hc with
| 0,     _  := or.inr rfl
| 1,     hc := absurd (eq.refl (1 : ‚Ñï)) (@char_p_ne_one Œ± _ (1 : ‚Ñï) hc)
| (m+2), hc := or.inl (@char_p_prime_of_ge_two Œ± _ (m+2) hc (nat.le_add_left 2 m))
end

--integral_domain
lemma char_p_prime [fintype Œ±] [decidable_eq Œ±] (p : ‚Ñï) [char_p Œ± p] : nat.prime p :=
or.resolve_right (char_p_prime_or_zero Œ± p) (char_p.ne_zero Œ± p)

lemma ring_char_prime [fintype Œ±] [decidable_eq Œ±] : nat.prime (ring_char Œ±) :=
@char_p_prime Œ± _ _ _ (ring_char Œ±) ‚ü®ring_char.spec Œ±‚ü©

end integral_domain

namespace finite_field

open fintype

variables (Œ± : Type u) {Œ≤ : Type v}
variables [discrete_field Œ±] [fintype Œ±]
variables [discrete_field Œ≤] [fintype Œ≤]

--finite field
theorem fin_field_card (p : ‚Ñï) [char_p Œ± p] :
‚àÉ (n : ‚Ñï+), nat.prime p ‚àß card Œ± = p^(n : ‚Ñï) :=
have hp : nat.prime p, from char_p_prime Œ± p,
have V : vector_space (zmodp p hp) Œ±, from {..zmod.to_module' Œ±},
let ‚ü®n, h‚ü© := @vector_space.card_fin _ _ _ _ _ _ V _ in
have hn : n > 0, from or.resolve_left (nat.eq_zero_or_pos n)
  (assume h0 : n = 0,
  have card Œ± = 1, by rw[‚Üênat.pow_zero (card _), ‚Üêh0]; exact h,
  have (1 : Œ±) = 0, from (fintype.card_le_one_iff.mp (le_of_eq this)) 1 0,
  absurd this one_ne_zero),
‚ü®‚ü®n, hn‚ü©, hp, fintype.card_fin p ‚ñ∏ h‚ü©

theorem fin_field_card_exists :
‚àÉ (p : ‚Ñï) (n : ‚Ñï+), nat.prime p ‚àß card Œ± = p^(n : ‚Ñï) :=
let ‚ü®p, hc‚ü© := char_p.exists Œ± in
‚ü®p, @fin_field_card Œ± _ _ p hc‚ü©

theorem finite_field.exists : ‚àÄ (p : ‚Ñï) (n : ‚Ñï+), nat.prime p ‚Üí
‚àÉ (Œ± : Type*) [hf : field Œ±] [hfin : fintype Œ±], @card Œ± hfin = p^(n : ‚Ñï) :=
sorry

theorem finite_field.unique : card Œ± = card Œ≤ ‚Üí (Œ± ‚âÉr Œ≤) :=
sorry


def fin_field (p : ‚Ñï) (n : ‚Ñï+) {hp : nat.prime p} :=
classical.some (finite_field.exists p n hp)

notation `ùîΩ_[` p `;` n `]` := fin_field p n --find better notation?

variables {p : ‚Ñï} {n : ‚Ñï+} {hp : nat.prime p}

noncomputable instance : field ùîΩ_[p;n] :=
classical.some (classical.some_spec (finite_field.exists p n hp))

noncomputable instance : fintype ùîΩ_[p;n] :=
classical.some (classical.some_spec $ classical.some_spec (finite_field.exists p n hp))

end finite_field
